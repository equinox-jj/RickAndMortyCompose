/*    val searchState: StateFlow<CharacterListUiState> = characterRepository
            .getCharacterByName(_searchText.value)
            .distinctUntilChanged()
            .combine(searchText) { result, text ->
                if (text.isBlank()) {
                    when (result) {
                        is Results.Loading -> CharacterListUiState.Loading
                        is Results.Success -> CharacterListUiState.Success(result.data?.results)
                        is Results.Error -> CharacterListUiState.Error(
                            errorMessage = result.errorMessage,
                            errorCode = result.errorCode,
                        )
                    }
                } else {
                    when (result) {
                        is Results.Loading -> CharacterListUiState.Loading
                        is Results.Success -> CharacterListUiState.Success(result.data?.results)
                        is Results.Error -> CharacterListUiState.Error(
                            errorMessage = result.errorMessage,
                            errorCode = result.errorCode,
                        )
                    }
                }
            }
            .stateIn(
                scope = viewModelScope,
                started = SharingStarted.WhileSubscribed(5000L),
                initialValue = CharacterListUiState.Loading
            )*/